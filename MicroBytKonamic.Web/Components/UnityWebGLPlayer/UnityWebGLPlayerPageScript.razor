@using System.Text.Json
@inject IWebHostEnvironment hostEnv

@if (errores.Count == 0)
{
    <PageScript Src="./Complements/UnityWebGLPlayer/UnityWebGLPlayerPageScript.razor.js" Params=@_params></PageScript>

    <div id="unity-container" class="unity-desktop">
        <div id="unity-fullscreen-button">
        </div>
        <div id="unity-build-title">
            <partial name="_PostalNavUrlSharedSocial"></partial>
        </div>
        <canvas id="unity-canvas" width=1024 height=768 tabindex="-1"></canvas>
        <div id="unity-loading-bar">
            <div id="unity-logo"></div>
            <div id="unity-progress-bar-empty">
                <div id="unity-progress-bar-full"></div>
            </div>
        </div>
        <div id="unity-warning"> </div>
        @* <div id="unity-footer">
    <div id="unity-webgl-logo"></div>
    <div id="unity-fullscreen-button"></div>
    <div id="unity-build-title">Navidad2023</div>
    </div> *@
    </div>
}
else
{
    <div class="alert alert-danger" role="alert">
        <ul>
            @foreach (var error in errores)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@code
{
    [Parameter] public string? BuildUrl { get; set; }
    [Parameter] public string? DataFilename { get; set; }
    [Parameter] public string? LoaderFilename { get; set; }
    [Parameter] public string? FrameworkFilename { get; set; }
    [Parameter] public string? CodeFilename { get; set; }
    [Parameter] public string? ProductName { get; set; }
    [Parameter] public string? ProductVersion { get; set; }
    [Parameter] public bool ShowDiagnostics { get; set; }

    private Dictionary<string, object>? _params;
    private List<string> errores = new();

    protected override async Task OnInitializedAsync()
    {
        var url = $"{BuildUrl}/index.json".Replace('/', '\\');
        var file = hostEnv.WebRootPath + url;

        if (File.Exists(file))
        {
            IndexJson? indexJson;
            using (var stream = new FileStream(file, FileMode.Open, FileAccess.Read))
            {
                indexJson = await JsonSerializer.DeserializeAsync<IndexJson>(stream);
            }

            if (indexJson != null)
            {
            }

            await Task.CompletedTask;
        }
    }

    protected override void OnParametersSet()
    {
        _params ??= new Dictionary<string, object>();
        errores.Clear();

        if (!string.IsNullOrWhiteSpace(BuildUrl))
            _params["buildUrl"] = BuildUrl;
        else
        {
            _params.Remove("buildUrl");
            errores.Add($"{nameof(BuildUrl)} is required");
        }
        if (!string.IsNullOrWhiteSpace(DataFilename))
            _params["dataFilename"] = DataFilename;
        else
        {
            _params.Remove("dataFilename");
            errores.Add($"{nameof(DataFilename)} is required");
        }
        if (!string.IsNullOrWhiteSpace(LoaderFilename))
            _params["loaderFilename"] = LoaderFilename;
        else
        {
            _params.Remove("loaderFilename");
            errores.Add($"{nameof(LoaderFilename)} is required");
        }
        if (!string.IsNullOrWhiteSpace(FrameworkFilename))
            _params["frameworkFilename"] = FrameworkFilename;
        else
        {
            _params.Remove("frameworkFilename");
            errores.Add($"{nameof(FrameworkFilename)} is required");
        }
        if (!string.IsNullOrWhiteSpace(CodeFilename))
            _params["codeFilename"] = CodeFilename;
        else
        {
            _params.Remove("codeFilename");
            errores.Add($"{nameof(CodeFilename)} is required");
        }
        if (!string.IsNullOrWhiteSpace(ProductName))
            _params["productName"] = ProductName;
        else
        {
            _params.Remove("productName");
            errores.Add($"{nameof(ProductName)} is required");
        }
        if (!string.IsNullOrWhiteSpace(ProductVersion))
            _params["productVersion"] = ProductVersion;
        else
        {
            _params.Remove("productVersion");
            errores.Add($"{nameof(ProductVersion)} is required");
        }
        _params["showDiagnostics"] = ShowDiagnostics;
    }
}
