@using MicroBytKonamic.Web.ViewModels.PostalNavidenya
@using Microsoft.AspNetCore.Antiforgery

@page "/PostalNavidenya"
@rendermode InteractiveServer
@inject IStringLocalizer<PostalNavidenyaHome> loc
@inject IStringLocalizer<SharedResource> shLoc
@inject IPostalesServices postalesServices
@inject NavigationManager navigationManager
@inject ILogger<PostalNavidenyaHome> log

<MKPageTitle Title=@shLoc["ChristmasCardNamePage"] />

<div class="container">
    <div class="row">
        @if (postalesServices.EsNavidad(DateTime.Now))
        {
            <fieldset class="border rounded-3 p-3">
                <legend class="float-none w-auto px-3">
                    @loc["FrmNewChristmasTitle"]
                </legend>
                <EditForm @ref="form" class="manage-post-form" FormName="Felicitacion" Model="Postal" OnValidSubmit="OnValidSubmit">
                    @if (!string.IsNullOrEmpty(messageStr))
                    {
                        <Alerts AlertType=@AlertsTypes.Danger>@messageStr</Alerts>
                        @* <div class="alert alert-danger" role="alert">@messageStr</div> *@
                    }
                    <DataAnnotationsValidator />
                    @* @Html.AntiForgeryToken() *@
                    @* En el caso de los formularios basados en EditForm, el componente AntiforgeryToken y el atributo [RequireAntiforgeryToken] se agregan automáticamente para proporcionar protección antiforgería de forma predeterminada. *@
                    @* <AntiforgeryToken /> *@
                    @* <input type="hidden" name="Fecha" id="fecha" @bind-value="Postal!.Fecha" /> *@
                    <InputHiddenUtcNow Change="d=>Postal!.Fecha=d" />
                    <div class="form-group">
                        <label for=@loc["FrmNewChristmasNickLabel"]></label> <ValidationMessage For="() => Postal!.Nick" />
                        <InputText class="form-control" placeholder=@loc["FrmNewChristmasNickPlaceHolder"] @bind-Value="Postal!.Nick" />
                    </div>
                    <div class="form-group">
                        <label asp-for=@loc["FrmNewChristmasChristmasGreetingLabel"]></label> <ValidationMessage For="() => Postal!.Felicitacion" />
                        <InputText class="form-control" placeholder=@loc["FrmNewChristmasChristmasGreetingPlaceHolder"] @bind-Value="Postal!.Felicitacion" />
                    </div>
                    <div class="form-group">
                        <input type="submit" value=@loc["FrmNewChristmasAddAndShowButton"] disabled="@isAdding" class="btn btn-primary btn-lg" />
                    </div>
                </EditForm>
            </fieldset>
        }
        else
        {
            <Alerts AlertType=@AlertsTypes.Info>@loc["FrmNewChristmasNoAddMsg"]</Alerts>
        }
    </div>
    <div class="row">
        <a href="PostalNavidenya/VerPostalNavidenya" class="btn btn-outline-secondary btn-lg">@loc["ShowButton"]</a>
    </div>
    <div class="row">
        <div class="shadow border rounded-3 p-3">
            <h6>@loc["ShareChristmasMsg"]</h6>
            <PostalNavUrlSharedSocial />
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm] public NuevaPostalViewModel? Postal { get; set; }

    private EditForm? form;
    private bool isAdding;
    private string? messageStr;

    protected override void OnInitialized() => Postal ??= new();

    async Task OnValidSubmit()
    {
        isAdding = true;
        messageStr = null;
        StateHasChanged();
        try
        {
            var input = new AltaFelicitacionIn
                {
                    Anyo = postalesServices.CalcAnyo(DateTime.Now),
                    FelicitacionDto = new FelicitacionDto
                    {
                        Fecha = Postal!.Fecha,
                        Nick = Postal!.Nick,
                        Texto = Postal!.Felicitacion
                    }
                };

            await postalesServices.AltaFelicitacionAsync(input);
            navigationManager.NavigateTo("PostalNavidenya/VerPostalNavidenya");
        }
        catch (Exception ex)
        {
            messageStr = shLoc["ServerCommError"];
            log.LogError(ex, null);
        }
        finally
        {
            isAdding = false;
        }
    }
}
